# practice_mode.py
# Modo pr√°ctica para ver el an√°lisis completo sin restricciones de horario

import sys
sys.path.insert(0, 'src')

from utils.config import SYMBOLS
from strategies.sistema_multiagente import SistemaMultiAgente
from risk_management.risk_manager import EnhancedRiskManager
from datetime import datetime

class ModoPractica:
    def __init__(self):
        print("\n" + "="*60)
        print("üéÆ MODO PR√ÅCTICA - An√°lisis sin restricciones")
        print("="*60)
        print("‚ö†Ô∏è Este modo es solo para aprender y practicar")
        print("‚ö†Ô∏è NO ejecutar√° trades reales")
        print("‚úÖ Funciona en fin de semana y fuera de horario")
        
        # Crear sistema
        print("\n‚öôÔ∏è Inicializando sistema...")
        self.risk_manager = EnhancedRiskManager()
        self.sistema = SistemaMultiAgente()
        
        # Modificar para no ejecutar trades reales
        self.sistema.ejecutar_trade_profesional = self.simular_trade
        
        print("\n‚úÖ Modo pr√°ctica listo")
    
    def simular_trade(self, decision):
        """Simula un trade sin ejecutarlo"""
        print(f"\n" + "="*50)
        print(f"üìù [SIMULACI√ìN DE TRADE]")
        print(f"="*50)
        
        print(f"üìä S√≠mbolo: {decision['symbol']}")
        print(f"üéØ Decisi√≥n: {decision['decision']}")
        print(f"üí° Tipo: {decision['tipo']}")
        print(f"üí™ Confianza: {decision['confidence']*100:.0f}%")
        print(f"üíµ Precio actual: ${decision['price']:.2f}")
        
        # Simular c√°lculos
        capital = 200
        tamano = 0.15 * decision['confidence']
        cantidad = (capital * tamano) / decision['price']
        
        print(f"\nüìà C√°lculos simulados:")
        print(f"  ‚Ä¢ Tama√±o posici√≥n: {tamano*100:.0f}% del capital")
        print(f"  ‚Ä¢ Cantidad: {cantidad:.2f} acciones")
        print(f"  ‚Ä¢ Capital usado: ${cantidad * decision['price']:.2f}")
        
        # Mostrar votos
        print(f"\nüë• Votos de los agentes:")
        buy_votes = sum(1 for v in decision['votos'] if v['action'] == 'BUY')
        sell_votes = sum(1 for v in decision['votos'] if v['action'] == 'SELL')
        hold_votes = sum(1 for v in decision['votos'] if v['action'] == 'HOLD')
        print(f"  ‚Ä¢ BUY: {buy_votes} votos")
        print(f"  ‚Ä¢ SELL: {sell_votes} votos")
        print(f"  ‚Ä¢ HOLD: {hold_votes} votos")
        
        # Razones principales
        print(f"\nüìù Razones principales:")
        razones = [(v['agent'], v['reason'], v['confidence']) 
                   for v in decision['votos'] 
                   if v['action'] == decision['decision'] and v['reason']]
        
        for agent, reason, conf in sorted(razones, key=lambda x: x[2], reverse=True)[:3]:
            print(f"  ‚Ä¢ {agent}: {reason} ({conf*100:.0f}%)")
        
        return True
    
    def ejecutar_analisis(self):
        """Ejecuta el an√°lisis completo"""
        print(f"\n‚è∞ AN√ÅLISIS DE PR√ÅCTICA - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("="*60)
        
        # Generar reporte de riesgo
        print("\nüìä Estado actual del sistema:")
        capital = self.risk_manager.get_capital_actual()
        exposicion = self.risk_manager.calcular_exposicion_actual()
        metricas = self.risk_manager.get_metricas_dia()
        
        print(f"  ‚Ä¢ Capital: ${capital:.2f}")
        print(f"  ‚Ä¢ Exposici√≥n: {exposicion['exposicion_total_pct']*100:.1f}%")
        print(f"  ‚Ä¢ Trades hoy: {metricas['trades_totales']}")
        print(f"  ‚Ä¢ P&L del d√≠a: ${metricas['pnl_total']:.2f} ({metricas['pnl_porcentaje']:.1f}%)")
        
        # Ejecutar an√°lisis de todos los s√≠mbolos
        print(f"\nüîç Analizando {len(SYMBOLS)} s√≠mbolos...")
        self.sistema.execute_analysis(SYMBOLS)
        
        # Resumen
        print(f"\n" + "="*60)
        print("‚úÖ An√°lisis de pr√°ctica completado")
        print("\nüí° Observaciones:")
        print("  ‚Ä¢ Este an√°lisis muestra qu√© har√≠a el bot en condiciones reales")
        print("  ‚Ä¢ Los trades mostrados son simulaciones")
        print("  ‚Ä¢ √ösalo para entender c√≥mo funciona el sistema")
        print("  ‚Ä¢ En trading real, respeta siempre los horarios de mercado")
    
    def mostrar_estadisticas(self):
        """Muestra estad√≠sticas educativas"""
        print(f"\nüìä ESTAD√çSTICAS EDUCATIVAS")
        print("="*60)
        
        # Aqu√≠ podr√≠as a√±adir estad√≠sticas como:
        # - S√≠mbolos m√°s vol√°tiles
        # - Agentes m√°s activos
        # - Tipos de se√±ales m√°s comunes
        # etc.
        
        print("\nüéì Consejos para trading real:")
        print("  ‚Ä¢ Empieza con capital peque√±o")
        print("  ‚Ä¢ Monitorea los primeros d√≠as de cerca")
        print("  ‚Ä¢ Ajusta los par√°metros seg√∫n resultados")
        print("  ‚Ä¢ Nunca arriesgues m√°s de lo que puedes perder")


def main():
    modo = ModoPractica()
    
    while True:
        print(f"\n" + "="*60)
        print("üéÆ MODO PR√ÅCTICA - MEN√ö")
        print("="*60)
        print("\n1. Ejecutar an√°lisis completo")
        print("2. Ver estad√≠sticas del sistema")
        print("3. Volver al men√∫ principal")
        
        opcion = input("\nElige opci√≥n (1-3): ")
        
        if opcion == "1":
            modo.ejecutar_analisis()
            input("\nPresiona Enter para continuar...")
            
        elif opcion == "2":
            modo.mostrar_estadisticas()
            input("\nPresiona Enter para continuar...")
            
        elif opcion == "3":
            break
        
        else:
            print("\n‚ùå Opci√≥n no v√°lida")


if __name__ == "__main__":
    main()
