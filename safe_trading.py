# safe_trading.py - Wrapper de seguridad para los primeros d√≠as
import sys
import os
sys.path.insert(0, 'src')

from sistema_multiagente import SistemaMultiAgente
from risk_manager import RiskManager
from datetime import datetime
import time

class SafeTradingWrapper:
    def __init__(self, modo='demo'):
        """
        Modos:
        - 'demo': Sin trades reales
        - 'micro': Trades de 20‚Ç¨ m√°ximo
        - 'normal': Trades normales con l√≠mites estrictos
        """
        self.modo = modo
        self.sistema = SistemaMultiAgente()
        self.risk_manager = RiskManager()
        
        # L√≠mites seg√∫n modo
        self.limites = {
            'demo': {
                'max_trades_dia': 999,
                'max_posicion': 0,
                'max_perdida_dia': 0
            },
            'micro': {
                'max_trades_dia': 2,
                'max_posicion': 20,  # 20‚Ç¨ m√°ximo
                'max_perdida_dia': 5  # 5‚Ç¨ m√°ximo
            },
            'normal': {
                'max_trades_dia': 3,
                'max_posicion': 50,  # 50‚Ç¨ m√°ximo
                'max_perdida_dia': 10  # 10‚Ç¨ m√°ximo
            }
        }
        
        # Override ejecutar_trade
        self.original_ejecutar = self.sistema.ejecutar_trade_profesional
        self.sistema.ejecutar_trade_profesional = self.ejecutar_trade_seguro
        
        self.trades_hoy = 0
        self.perdida_hoy = 0
        
        print(f"üõ°Ô∏è SAFE TRADING WRAPPER - Modo: {modo.upper()}")
        print(f"  ‚Ä¢ Max trades/d√≠a: {self.limites[modo]['max_trades_dia']}")
        print(f"  ‚Ä¢ Max posici√≥n: ${self.limites[modo]['max_posicion']}")
        print(f"  ‚Ä¢ Max p√©rdida/d√≠a: ${self.limites[modo]['max_perdida_dia']}")
    
    def ejecutar_trade_seguro(self, decision):
        """Wrapper seguro para ejecutar trades"""
        # Verificar l√≠mites
        if self.trades_hoy >= self.limites[self.modo]['max_trades_dia']:
            print(f"üõë L√≠mite de trades alcanzado ({self.trades_hoy})")
            return False
        
        if self.perdida_hoy >= self.limites[self.modo]['max_perdida_dia']:
            print(f"üõë L√≠mite de p√©rdida alcanzado (${self.perdida_hoy:.2f})")
            return False
        
        # Calcular tama√±o seguro
        valor_trade = decision['quantity'] * decision['price']
        max_permitido = self.limites[self.modo]['max_posicion']
        
        if valor_trade > max_permitido and max_permitido > 0:
            # Ajustar cantidad
            decision['quantity'] = max_permitido / decision['price']
            print(f"‚ö†Ô∏è Tama√±o ajustado a ${max_permitido} m√°ximo")
        
        # Log detallado
        print(f"\n{'='*50}")
        print(f"üîç EVALUANDO TRADE:")
        print(f"  ‚Ä¢ S√≠mbolo: {decision['symbol']}")
        print(f"  ‚Ä¢ Acci√≥n: {decision['decision']}")
        print(f"  ‚Ä¢ Precio: ${decision['price']:.2f}")
        print(f"  ‚Ä¢ Cantidad: {decision['quantity']:.2f}")
        print(f"  ‚Ä¢ Valor: ${decision['quantity'] * decision['price']:.2f}")
        print(f"  ‚Ä¢ Confianza: {decision['confidence']*100:.0f}%")
        
        if self.modo == 'demo':
            print(f"  ‚úÖ [DEMO] Trade simulado")
            # Registrar en paper trading reporter
            try:
                from paper_trading_reporter import reporter
                reporter.registrar_trade(decision)
            except:
                pass
            return True
        
        # Confirmaci√≥n manual para los primeros trades
        if self.trades_hoy < 3 and self.modo != 'demo':
            respuesta = input("\n¬øEjecutar este trade? (s/n): ")
            if respuesta.lower() != 's':
                print("  ‚ùå Trade cancelado por usuario")
                return False
        
        # Ejecutar trade real
        resultado = self.original_ejecutar(decision)
        
        if resultado:
            self.trades_hoy += 1
            print(f"  ‚úÖ Trade #{self.trades_hoy} ejecutado")
        
        return resultado
    
    def run_safe_cycle(self, symbols):
        """Ejecuta un ciclo con todas las protecciones"""
        print(f"\nüõ°Ô∏è CICLO SEGURO - {datetime.now().strftime('%H:%M:%S')}")
        print(f"Modo: {self.modo.upper()} | Trades hoy: {self.trades_hoy}")
        
        # Verificar horario
        hora = datetime.now().hour
        if hora < 15 or hora >= 22:
            print("‚è∏Ô∏è Fuera de horario de trading")
            return
        
        # Ejecutar an√°lisis
        self.sistema.execute_analysis(symbols)
    
    def quick_health_check(self):
        """Verificaci√≥n r√°pida del sistema"""
        print("\nüè• VERIFICACI√ìN R√ÅPIDA")
        print("="*40)
        
        # Check capital
        capital = self.risk_manager.get_capital_actual()
        print(f"‚úÖ Capital: ${capital:.2f}")
        
        # Check exposici√≥n
        exposicion = self.risk_manager.calcular_exposicion_actual()
        print(f"‚úÖ Exposici√≥n: {exposicion['exposicion_total_pct']*100:.1f}%")
        
        # Check m√©tricas del d√≠a
        metricas = self.risk_manager.get_metricas_dia()
        print(f"‚úÖ Trades hoy: {metricas['trades_totales']}")
        print(f"‚úÖ P&L: ${metricas['pnl_total']:.2f} ({metricas['pnl_porcentaje']:.1f}%)")
        
        return True
    
    def modo_supervision(self, symbols, intervalo_minutos=15):
        """Modo con supervisi√≥n continua"""
        print(f"\nüëÄ MODO SUPERVISI√ìN - Intervalo: {intervalo_minutos} min")
        print("Presiona Ctrl+C para detener\n")
        
        try:
            while True:
                # Quick health check
                self.quick_health_check()
                
                # Ejecutar ciclo
                self.run_safe_cycle(symbols)
                
                # Esperar
                print(f"\n‚è≥ Pr√≥ximo ciclo en {intervalo_minutos} minutos...")
                time.sleep(intervalo_minutos * 60)
                
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è Supervisi√≥n detenida")
            self.generar_resumen()
    
    def generar_resumen(self):
        """Genera resumen de la sesi√≥n"""
        print(f"\n{'='*60}")
        print("üìä RESUMEN DE LA SESI√ìN")
        print(f"{'='*60}")
        print(f"Modo: {self.modo}")
        print(f"Trades ejecutados: {self.trades_hoy}")
        print(f"P√©rdida acumulada: ${self.perdida_hoy:.2f}")
        print(f"Hora fin: {datetime.now().strftime('%H:%M:%S')}")


# Funciones helper para los diferentes d√≠as

def dia1_validacion():
    """Lunes - Solo validaci√≥n"""
    from config import SYMBOLS
    
    print("\nüü¶ D√çA 1 - VALIDACI√ìN")
    print("="*60)
    
    wrapper = SafeTradingWrapper(modo='demo')
    
    # Ejecutar cada 30 minutos manualmente
    for i in range(10):  # 5 horas de trading
        print(f"\n\n>>> CICLO {i+1}/10")
        wrapper.run_safe_cycle(SYMBOLS)
        
        if i < 9:
            input("\n‚è∏Ô∏è Presiona Enter para siguiente ciclo (o Ctrl+C para salir)...")

def dia2_paper_trading():
    """Paper trading intensivo"""
    from config import SYMBOLS
    
    print("\nüü® PAPER TRADING INTENSIVO")
    print("="*60)
    
    wrapper = SafeTradingWrapper(modo='demo')
    
    # Mensaje sobre reportes
    print("\nüìä REPORTES AUTOM√ÅTICOS:")
    print("  ‚Ä¢ Los trades se guardan autom√°ticamente")
    print("  ‚Ä¢ Para ver reporte: python paper_trading_reporter.py reporte")
    print("  ‚Ä¢ Reporte final: python paper_trading_reporter.py final")
    
    wrapper.modo_supervision(SYMBOLS, intervalo_minutos=15)

def dia3_micro_test():
    """Test con 20‚Ç¨"""
    from config import SYMBOLS
    
    print("\nüüß MICRO TEST (20‚Ç¨ m√°x)")
    print("="*60)
    print("‚ö†Ô∏è DINERO REAL - M√°ximo 2 trades de 20‚Ç¨")
    
    confirmacion = input("\n¬øConfirmas que quieres operar con dinero real? (si/no): ")
    if confirmacion.lower() != 'si':
        print("‚ùå Cancelado")
        return
    
    wrapper = SafeTradingWrapper(modo='micro')
    wrapper.modo_supervision(SYMBOLS[:6], intervalo_minutos=30)  # Solo 6 s√≠mbolos

def dia4_trading_real():
    """Trading real con 200‚Ç¨"""
    from config import SYMBOLS
    
    print("\nüü• TRADING REAL (200‚Ç¨)")
    print("="*60)
    print("‚ö†Ô∏è DINERO REAL - L√≠mites estrictos activos")
    
    confirmacion = input("\n¬øConfirmas que quieres operar con 200‚Ç¨ reales? (si/no): ")
    if confirmacion.lower() != 'si':
        print("‚ùå Cancelado")
        return
    
    # Verificaci√≥n r√°pida
    wrapper = SafeTradingWrapper(modo='normal')
    if wrapper.quick_health_check():
        print("\n‚úÖ Sistema verificado")
        
        continuar = input("\n¬øContinuar con trading real? (si/no): ")
        if continuar.lower() == 'si':
            wrapper.modo_supervision(SYMBOLS, intervalo_minutos=20)
    else:
        print("\n‚ùå Verificaci√≥n fall√≥")


if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        if sys.argv[1] == "dia1":
            dia1_validacion()
        elif sys.argv[1] == "dia2":
            dia2_paper_trading()
        elif sys.argv[1] == "dia3":
            dia3_micro_test()
        elif sys.argv[1] == "dia4":
            dia4_trading_real()
        else:
            print("Uso: python safe_trading.py [dia1|dia2|dia3|dia4]")
    else:
        print("\nüõ°Ô∏è SAFE TRADING WRAPPER")
        print("="*60)
        print("\nUso:")
        print("  python safe_trading.py dia1  # Validaci√≥n")
        print("  python safe_trading.py dia2  # Paper trading")
        print("  python safe_trading.py dia3  # Micro test 20‚Ç¨")
        print("  python safe_trading.py dia4  # Trading real 200‚Ç¨")
        print("\nO ejecuta directamente:")
        print("  python src/practice_mode.py  # Modo pr√°ctica")
        print("  python monitor.py            # Monitor de trading")